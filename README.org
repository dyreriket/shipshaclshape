
** http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl

*** SHACL Shape generator

This python script gets the vocabulary at the namespace of the
vocabulary (which are assumed to be the same) and generates a shacl
shape for it.

#+NAME: py_shacl_vocabulary_shape
#+BEGIN_SRC python :var prefix="rdfs" :var url="http://www.w3.org/2000/01/rdf-schema#" :wrap src ttl 
import rdflib

graph = rdflib.Graph()
graph.parse(url)

queryBase = """
      SELECT DISTINCT ?value 
      WHERE { { ?value ?p ?o }
        UNION { ?s ?value ?o }
        UNION { ?s ?p ?value }
      FILTER (isIRI(?value) 
        && STRSTARTS(STR(?value), '""" + url + """'))"""

qResult = graph.query(queryBase  + " FILTER(STR(?value) != '" + url + "')} ORDER BY ?value ")
vocabularyElements = qResult.serialize(format="csv").decode('utf-8').split()[1:];

vocab = prefix.upper()

shape =  '''

sss-sve:''' + vocab + '''VocabularyShape a sh:NodeShape ;
  sh:targetNode sss:ANY_NODE ; ## matches any node
  sh:name "''' + vocab + ''' vocabulary element." ;
  sh:message "Unrecognised ''' + vocab + ''' vocabulary element. Check spelling." ;
  sh:sparql [ a sh:SPARQLConstraint ;
    sh:select """''' + queryBase + '''
      FILTER (?value NOT IN (''' + ', '.join(f'<{w}>' for w in vocabularyElements) + ''')) }""" ].
'''

return shape

#+END_SRC

#+RESULTS: py_shacl_vocabulary_shape
#+BEGIN_src ttl
sss-sve:RDFSVocabularyShape a sh:NodeShape ;
	  sh:targetNode sss:ANY_NODE ; ## matches any node
	  sh:name "RDFS vocabulary element." ;
	  sh:message "Unrecognised RDFS vocabulary element. Check spelling." ;
	  sh:sparql [ a sh:SPARQLConstraint ;
	    sh:select """
	      SELECT DISTINCT ?value 
	      WHERE { { ?value ?p ?o }
	        UNION { ?s ?value ?o }
	        UNION { ?s ?p ?value }
	      FILTER (isIRI(?value) 
	        && STRSTARTS(STR(?value), 'http://www.w3.org/2000/01/rdf-schema#'))
	      FILTER (?value NOT IN (<http://www.w3.org/2000/01/rdf-schema#Class>, <http://www.w3.org/2000/01/rdf-schema#Container>, <http://www.w3.org/2000/01/rdf-schema#ContainerMembershipProperty>, <http://www.w3.org/2000/01/rdf-schema#Datatype>, <http://www.w3.org/2000/01/rdf-schema#Literal>, <http://www.w3.org/2000/01/rdf-schema#Resource>, <http://www.w3.org/2000/01/rdf-schema#comment>, <http://www.w3.org/2000/01/rdf-schema#domain>, <http://www.w3.org/2000/01/rdf-schema#isDefinedBy>, <http://www.w3.org/2000/01/rdf-schema#label>, <http://www.w3.org/2000/01/rdf-schema#member>, <http://www.w3.org/2000/01/rdf-schema#range>, <http://www.w3.org/2000/01/rdf-schema#seeAlso>, <http://www.w3.org/2000/01/rdf-schema#subClassOf>, <http://www.w3.org/2000/01/rdf-schema#subPropertyOf>)) }""" ].
#+END_src


*** All vocabularies

#+NAME: std-vocabulary-elements
#+BEGIN_SRC ttl :noweb yes
@prefix sh: 	  <http://www.w3.org/ns/shacl#> .
@prefix sss:      <http://shipshape.dyreriket.xyz#> .
@prefix sss-sve:  <http://shipshape.dyreriket.xyz/std-vocabulary-elements#> . 

<<py_shacl_vocabulary_shape(prefix="rdf",   url="http://www.w3.org/1999/02/22-rdf-syntax-ns#")>>
<<py_shacl_vocabulary_shape(prefix="rdfs",  url="http://www.w3.org/2000/01/rdf-schema#")>>
<<py_shacl_vocabulary_shape(prefix="owl",   url="http://www.w3.org/2002/07/owl#")>>
<<py_shacl_vocabulary_shape(prefix="skos",  url="http://www.w3.org/2004/02/skos/core#")>>
<<py_shacl_vocabulary_shape(prefix="sh",    url="http://www.w3.org/ns/shacl#")>>
<<py_shacl_vocabulary_shape(prefix="shsh",  url="http://www.w3.org/ns/shacl-shacl#")>>
<<py_shacl_vocabulary_shape(prefix="dc",  url="http://purl.org/dc/elements/1.1/")>>
<<py_shacl_vocabulary_shape(prefix="foaf",  url="http://xmlns.com/foaf/0.1/")>>

#+END_SRC

*** Parse + pretty print file

#+NAME: py_parse-ttl-block
#+BEGIN_SRC python :var block=std-vocabulary-elements :results value file :file std-vocabulary-elements.ttl
from rdflib import Graph

g = Graph()
g.parse(data=block, format="text/turtle")

return g.serialize(format='turtle').decode('utf-8')
#+END_SRC

#+RESULTS: py_parse-ttl-block
[[file:std-vocabulary-elements.ttl]]

* _org-mode                                                        :noexport:

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Shipshape
#+DATE: <2022-01-31 Mon>
#+AUTHOR: Martin G. Skj√¶veland
#+EMAIL: m.g.skjaeveland@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.14)
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE: RDF in shipshape! Useful SHACL shapes!
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:
#+EXPORT_FILE_NAME: index.html

