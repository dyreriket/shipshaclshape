
* http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl

This set of shapes check that the vocabulary elements that belong to
any of the following following namespaces are also found in
vocabularies published at the namespace address. In other words, they
check that the RDF data does not use terms from these vocabularies
that are not defined in them, hence avoiding typos like ~rdfs:type~
(should be ~rdf:type~) and ~owl:UnionOf~ (should be ~owl:unionOf~).

The shapes only check IRIs and not shapes, i.e., they do not check
that the these vocabularies are use according to their specification.

#+NAME: prefixlist
 - rdf :: http://www.w3.org/1999/02/22-rdf-syntax-ns#
 - rdfs :: http://www.w3.org/2000/01/rdf-schema#
 - owl :: http://www.w3.org/2002/07/owl#
 - skos :: http://www.w3.org/2004/02/skos/core#
 - sh :: http://www.w3.org/ns/shacl#
 - shsh :: http://www.w3.org/ns/shacl-shacl#
 - dc :: http://purl.org/dc/elements/1.1/
 - foaf :: http://xmlns.com/foaf/0.1/

** Script                                                          :noexport:

#+NAME: py_shacl_vocabulary_shape
#+BEGIN_SRC python :var list=prefixlist :results value file :file std-vocabulary-elements.ttl :exports none
import rdflib
from rdflib import Graph, URIRef

shapeGraph = Graph()

for row in list:
  (prefix, url) = row[0].split(' :: ')

  shapeGraph.namespace_manager.bind(prefix, URIRef(url))

  # read vocabulary
  vgraph = rdflib.Graph()
  vgraph.parse(url)

  # get vocabulary elements 
  queryBase = """
      SELECT DISTINCT ?value 
      WHERE { { ?value ?p ?o }
        UNION { ?s ?value ?o }
        UNION { ?s ?p ?value }
      FILTER (isIRI(?value) 
        && STRSTARTS(STR(?value), '""" + url + """'))"""

  qResult = vgraph.query(queryBase  + " FILTER(STR(?value) != '" + url + "')} ORDER BY ?value ")
  vocabularyElements = qResult.serialize(format="csv").decode('utf-8').split()[1:];

  vocab = prefix.upper()

  shape =  '''
@prefix sh: 	  <http://www.w3.org/ns/shacl#> .
@prefix sss:      <http://shipshape.dyreriket.xyz#> .
@prefix sss-sve:  <http://shipshape.dyreriket.xyz/std-vocabulary-elements#> . 

sss-sve:''' + vocab + '''VocabularyShape a sh:NodeShape ;
  sh:targetNode sss:ANY_NODE ; ## matches any node
  sh:name "''' + vocab + ''' vocabulary element." ;
  sh:message "Unrecognised ''' + vocab + ''' vocabulary element. Check spelling." ;
  sh:sparql [ a sh:SPARQLConstraint ;
    sh:select """''' + queryBase + '''
      FILTER (?value NOT IN (''' + ', '.join(f'<{w}>' for w in vocabularyElements) + ''')) }""" ].
'''

  shapeGraph.parse(data=shape, format='text/turtle')

return shapeGraph.serialize(format='text/turtle').decode('utf-8')

#+END_SRC

#+RESULTS: py_shacl_vocabulary_shape
[[file:std-vocabulary-elements.ttl]]

** Examples                                                        

*** ~sh:conforms false~

RDF data:

#+BEGIN_SRC ttl :tangle test/sve/ex1.ttl :mkdirp yes
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix ex: <http://example.com#> .

ex:a rdfs:type ex:A .
ex:b rdf:type ex:B .

ex:A rdfs:subclassof ex:B .
#+END_SRC

Checking with Jena (https://jena.apache.org/):

#+BEGIN_SRC sh :results value code :wrap src ttl :exports both
apache-jena/bin/shacl v --shapes=http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl --data=test/sve/ex1.ttl
#+END_SRC

#+RESULTS:
#+BEGIN_src ttl
@prefix ex:      <http://example.com#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:      <http://www.w3.org/ns/shacl#> .
@prefix sss:     <http://shipshape.dyreriket.xyz#> .
@prefix sss-sve: <http://shipshape.dyreriket.xyz/std-vocabulary-elements#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  false ;
  sh:result    [ rdf:type                      sh:ValidationResult ;
                 sh:focusNode                  sss:ANY_NODE ;
                 sh:resultMessage              "Unrecognised RDFS vocabulary element. Check spelling." ;
                 sh:resultSeverity             sh:Violation ;
                 sh:sourceConstraintComponent  sh:SPARQLConstraintComponent ;
                 sh:sourceShape                sss-sve:RDFSVocabularyShape ;
                 sh:value                      rdfs:subclassof
               ] ;
  sh:result    [ rdf:type                      sh:ValidationResult ;
                 sh:focusNode                  sss:ANY_NODE ;
                 sh:resultMessage              "Unrecognised RDFS vocabulary element. Check spelling." ;
                 sh:resultSeverity             sh:Violation ;
                 sh:sourceConstraintComponent  sh:SPARQLConstraintComponent ;
                 sh:sourceShape                sss-sve:RDFSVocabularyShape ;
                 sh:value                      rdfs:type
               ]
] .
#+END_src

*** ~sh:conforms true~

RDF data. Notice that the ~owl~ vocabulary is not used according to
the OWL specification. However, this is not within the scope of these
shapes to check.

#+BEGIN_SRC ttl :tangle test/sve/ex2.ttl :mkdirp yes
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix ex: <http://example.com#> .


owl:Class owl:unionOf owl:NamedIndividual .
owl:Class owl:unionOf rdf:type .
owl:unionOf ex:A ex:b .
#+END_SRC

Checking with Jena (https://jena.apache.org/):

#+BEGIN_SRC sh :results value code :wrap src ttl :exports both
apache-jena/bin/shacl v --shapes=http://shipshape.dyreriket.xyz/std-vocabulary-elements.ttl --data=test/sve/ex2.ttl
#+END_SRC

#+RESULTS:
#+BEGIN_src ttl
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

[ rdf:type     sh:ValidationReport ;
  sh:conforms  true
] .
#+END_src

* _org-mode                                                        :noexport:

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Shipshape
#+DATE: <2022-01-31 Mon>
#+AUTHOR: Martin G. Skj√¶veland
#+EMAIL: m.g.skjaeveland@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.14)
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE: RDF in shipshape! Useful SHACL shapes!
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:
#+EXPORT_FILE_NAME: index.html

